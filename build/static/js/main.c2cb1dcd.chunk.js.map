{"version":3,"sources":["pages/Product/Product.tsx","types/index.tsx","components/Header/index.tsx","components/Flag/index.tsx","components/TableRow/index.tsx","components/CountryTable/index.tsx","components/SearchBar/index.tsx","redux/actions/country.ts","contexts/ThemeContext.tsx","components/SideBar/index.tsx","components/Main/index.tsx","Routes.tsx","hooks/useFetch.tsx","App.tsx","serviceWorker.ts","redux/reducers/product.ts","redux/reducers/ui.ts","redux/reducers/country.ts","redux/reducers/index.ts","redux/sagas/product.ts","redux/sagas/ui.ts","redux/sagas/index.ts","localStorage/index.tsx","redux/store.ts","index.tsx"],"names":["Product","countries","name","useParams","country","find","c","className","Card","Image","src","flag","wrapped","ui","Content","Header","Meta","region","Description","languages","map","lang","key","extra","population","toString","replace","DialogType","sortableStyle","cursor","pure","handleClick","style","onClick","imageURL","alt","flagURL","handleAddCountry","chosenCountry","countriesInCart","useSelector","state","inCart","to","disabled","added","variant","theme","data","Table","responsive","striped","hover","id","handleChange","type","onChange","e","placeholder","addCountry","payload","ThemeContext","React","createContext","undefined","ThemeProvider","children","useState","setTheme","useEffect","Provider","value","inCartStyle","display","justifyContent","alignItems","flexDirection","light","backgroundColor","color","dark","SideBar","isFiltered","filtered","all","visible","setVisible","dispatch","useDispatch","useContext","count","length","isEmpty","changeTheme","Grid","columns","Column","Button","Group","currentTarget","Icon","Or","as","Label","basic","pointing","Sidebar","Pushable","Segment","Menu","animation","direction","icon","inverted","onHide","vertical","width","Item","Pusher","dimmed","Main","setKeyword","setIsFiltered","setFiltered","order","setOrder","useCallback","filter","toLowerCase","sortByName","sort","a","b","localeCompare","sortByLanguages","sortByPopulation","sortByRegion","console","log","row","i","preventDefault","target","toUpperCase","document","getElementById","getElementsByClassName","innerText","indexOf","Routes","exact","path","render","props","useFetch","response","setResponse","error","setError","unmounted","fetch","res","json","fetchData","App","Boolean","window","location","hostname","match","product","action","p","index","findIndex","splice","defaultState","dialogOpen","dialog","createRootReducer","combineReducers","doSomethingWhenAddingProduct","takeLatest","doSomethingWhenDialogOpen","rootSaga","productSagas","uiSagas","loadState","serializedState","localStorage","getItem","JSON","parse","err","saveState","stringify","setItem","persistedState","initState","store","initialState","sagaMiddleware","createSagaMiddleware","middlewares","thunk","composeEnhancers","compose","createStore","applyMiddleware","subscribe","throttle","getState","run","makeStore","WithProvider","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2cb1dcd.chunk.js","sourcesContent":["import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Image, Card, Icon } from 'semantic-ui-react'\n\nimport { RoutesProps } from '../../types/index'\nimport './Product.scss'\n\nexport default function Product({ countries }: RoutesProps) {\n  const { name } = useParams()\n\n  // const product = useSelector((state: AppState) =>\n  //   state.product.inCart.find(p => p.id === id))\n\n  // if (!product) {\n  //   return <div>Product not found</div>\n  // }\n\n  const country = countries.find((c: any) => c.name === name)\n\n  if (!country) {\n    return <div>Product not found</div>\n  }\n\n  return (\n    <div className=\"single-country\">\n      <Card>\n        <Image src={country.flag} wrapped ui={false} />\n        <Card.Content>\n          <Card.Header>{country.name}</Card.Header>\n          <Card.Meta>\n            <span className=\"date\">Region: {country.region}</span>\n          </Card.Meta>\n          <Card.Description>\n            Languages:\n            <td className=\"align-middle\">\n              {country.languages.map((lang: any) => {\n                return (\n                  <li className=\"languages\" key={lang.name}>\n                    {lang.name}\n                  </li>\n                )\n              })}\n            </td>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          Population:{' '}\n          {country.population.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        </Card.Content>\n      </Card>\n    </div>\n  )\n}\n","import { CSSProperties } from 'react'\n\n// Prop types\nexport type CountryTableProps = {\n  theme: CSSProperties\n  data: any\n  handleClick: Function\n  handleAddCountry: Function\n}\n\nexport type FlagProps = {\n  imageURL: string\n}\n\nexport type HeaderProps = {\n  handleClick: Function\n}\n\nexport type SearchBarProps = {\n  handleChange: Function\n}\n\nexport type TableRowProps = {\n  key: string\n  name: string\n  flagURL: string\n  languages: any\n  population: number\n  region: string\n  handleAddCountry: Function\n}\n\nexport type RoutesProps = {\n  countries: any\n}\n\nexport type SideBarProps = {\n  inCart: any\n  isFiltered: boolean\n  filtered: any\n  all: any\n  handleClick: Function\n  handleAddCountry: Function\n  handleChange: Function\n}\n\n// Action types\nexport const ADD_PRODUCT = 'ADD_PRODUCT'\nexport const REMOVE_PRODUCT = 'REMOVE_PRODUCT'\nexport const TOGGLE_DIALOG = 'TOGGLE_DIALOG'\nexport const ADD_COUNTRY = 'ADD_COUNTRY'\nexport const REMOVE_COUNTRY = 'REMOVE_COUNTRY'\n\n// Enum\nexport enum DialogType {\n  SignIn = 'signIn',\n  SignUp = 'signUp',\n}\n\n//A country\nexport type Country = {\n  key: string\n  flagURL: string\n  name: string\n  languages: any\n  population: number\n  region: string\n}\n\nexport type AddCountryAction = {\n  type: typeof ADD_COUNTRY\n  payload: {\n    country: Country\n  }\n}\n\nexport type RemoveCountryAction = {\n  type: typeof REMOVE_COUNTRY\n  payload: {\n    country: Country\n  }\n}\n\n// A product\nexport type Product = {\n  id: string\n  name: string\n  price: number\n}\n\nexport type AddProductAction = {\n  type: typeof ADD_PRODUCT\n  payload: {\n    product: Product\n  }\n}\n\nexport type RemoveProductAction = {\n  type: typeof REMOVE_PRODUCT\n  payload: {\n    product: Product\n  }\n}\n\nexport type ToggleDialogAction = {\n  type: typeof TOGGLE_DIALOG\n  payload: {\n    dialog: DialogType\n  }\n}\n\nexport type UiActions = ToggleDialogAction\n\n// Use this union in reducer\nexport type ProductActions = AddProductAction | RemoveProductAction\n\nexport type CountryActions = AddCountryAction | RemoveCountryAction\n\nexport type ProductState = {\n  inCart: Product[]\n}\n\nexport type CountryState = {\n  inCart: Country[]\n}\n\n// Using dynamic keys from an enum\nexport type UiState = {\n  dialogOpen: {\n    [key in DialogType]?: boolean\n  }\n}\n\nexport type AppState = {\n  product: ProductState\n  country: CountryState\n  ui: UiState\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { pure } from 'recompose'\n\nimport { HeaderProps } from '../../types'\nimport './Header.scss'\n\nconst sortableStyle = {\n  cursor: 'pointer',\n}\n\nconst Header = ({ handleClick }: HeaderProps) => {\n  const headerName = [\n    'Flag',\n    'Name',\n    'Languages',\n    'Population',\n    'Region',\n    'Add to cart',\n  ]\n  return (\n    <thead>\n      <tr>\n        {headerName.map((name: string) => {\n          if (name !== 'Flag' && name !== 'Add to cart') {\n            return (\n              <th\n                key={name}\n                className=\"sortable-header\"\n                style={sortableStyle}\n                onClick={() => handleClick(name)}\n              >\n                {name} <i className=\"fas fa-sort\"></i>\n              </th>\n            )\n          } else return <th key={name}>{name}</th>\n        })}\n      </tr>\n    </thead>\n  )\n}\n\nexport default pure(Header)\n\nHeader.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { pure } from 'recompose'\n\nimport { FlagProps } from '../../types'\nimport './Flag.scss'\n\nconst Flag = ({ imageURL }: FlagProps) => {\n  return <img className=\"flag\" alt=\"Flag\" src={imageURL} />\n}\n\nexport default pure(Flag)\n\nFlag.propTypes = {\n  imageURL: PropTypes.string.isRequired,\n}\n","import React from 'react'\nimport Flag from '../Flag'\nimport { pure } from 'recompose'\nimport { Link } from 'react-router-dom'\nimport { Button } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\n\nimport { TableRowProps, AppState, Country } from '../../types'\nimport './TableRow.scss'\n// import PropTypes from 'prop-types';\n\nconst TableRow = ({\n  key,\n  name,\n  flagURL,\n  languages,\n  population,\n  region,\n  handleAddCountry,\n}: TableRowProps) => {\n  const lang = languages\n  const chosenCountry = {\n    key: key,\n    name: name,\n    flag: flagURL,\n    languages: languages,\n    population: population,\n    region: region,\n  }\n\n  const countriesInCart = useSelector((state: AppState) => state.country.inCart)\n\n  const added = (name: string) => {\n    if (countriesInCart.find((country: Country) => country.name === name)) {\n      return true\n    }\n    return false\n  }\n  return (\n    <tr className=\"table-row\">\n      <td className=\"align-middle\">\n        <Flag imageURL={flagURL}></Flag>\n      </td>\n      <td className=\"country-name-text align-middle\">\n        <Link to={`/countries/${name}`}>{name}</Link>\n      </td>\n      <td className=\"align-middle\">\n        {lang.map((lang: any) => {\n          return (\n            <li className=\"languages\" key={lang.name}>\n              {lang.name}\n            </li>\n          )\n        })}\n      </td>\n      <td className=\"align-middle\">\n        {population.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n      </td>\n      <td className=\"align-middle\">{region}</td>\n      <td className=\"align-middle\">\n        <Button\n          disabled={added(name)}\n          onClick={() => {\n            handleAddCountry(chosenCountry)\n          }}\n          variant=\"info\"\n        >\n          Add\n        </Button>\n      </td>\n    </tr>\n  )\n}\n\nexport default pure(TableRow)\n\n// TableRow.propTypes = {\n//   key: PropTypes.string.isRequired,\n//   flagURL: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   language: PropTypes.array,\n//   population: PropTypes.number.isRequired,\n//   region: PropTypes.string.isRequired,\n//   handleAddCountry: PropTypes.func.isRequired\n// }\n","import React from 'react'\nimport { pure } from 'recompose'\nimport { Table } from 'react-bootstrap'\n\nimport { CountryTableProps } from '../../types/index'\nimport Header from '../Header'\nimport TableRow from '../TableRow'\nimport './CountryTable.scss'\n\nconst CountryTable = ({\n  theme,\n  data,\n  handleClick,\n  handleAddCountry,\n}: CountryTableProps) => {\n  return (\n    <Table responsive=\"md\" striped hover>\n      <Header handleClick={handleClick}></Header>\n      <tbody style={theme} id=\"table-body\">\n        {data.map((country: any) => (\n          <TableRow\n            key={country.name}\n            flagURL={country.flag}\n            name={country.name}\n            languages={country.languages}\n            population={country.population}\n            region={country.region}\n            handleAddCountry={handleAddCountry}\n          />\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default pure(CountryTable)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { pure } from 'recompose'\n\nimport { SearchBarProps } from '../../types'\nimport './SearchBar.scss'\n\nconst SearchBar = ({ handleChange }: SearchBarProps) => {\n  return (\n    <div className=\"search-bar\">\n      <input\n        id=\"my-input\"\n        type=\"text\"\n        onChange={(e) => handleChange(e)}\n        placeholder=\"Search by name...\"\n      />\n    </div>\n  )\n}\n\nexport default pure(SearchBar)\n\nSearchBar.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n}\n","import { Dispatch } from 'redux'\n\nimport {\n  ADD_COUNTRY,\n  REMOVE_COUNTRY,\n  CountryActions,\n  Country,\n} from '../../types/index'\n\nexport function addCountry(country: Country): CountryActions {\n  return {\n    type: ADD_COUNTRY,\n    payload: {\n      country,\n    },\n  }\n}\n\nexport function removeCountry(country: Country): CountryActions {\n  return {\n    type: REMOVE_COUNTRY,\n    payload: {\n      country,\n    },\n  }\n}\n\n// Async action processed by redux-thunk middleware\nexport function fetchCountry(countryName: string) {\n  return (dispatch: Dispatch) => {\n    return fetch(`/countries/${countryName}`)\n      .then((resp) => resp.json())\n      .then((country) => {\n        dispatch(addCountry(country))\n      })\n  }\n}\n","import React from 'react'\n\nconst defaultTheme = 'light'\ntype ThemeContextType = {\n  theme: string\n  setTheme: (value: string) => void\n}\nconst ThemeContext = React.createContext<ThemeContextType | undefined>(\n  undefined\n)\n\ntype Props = {\n  children: React.ReactNode\n}\n\nexport const useTheme = () => React.useContext(ThemeContext)\n\nconst ThemeProvider = ({ children }: Props) => {\n  const [theme, setTheme] = React.useState(defaultTheme)\n\n  React.useEffect(() => {\n    // We'd get the theme from a web API / local storage in a real app\n    // We've hardcoded the theme in our example\n    const currentTheme = 'light'\n    setTheme(currentTheme)\n  }, [])\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport default ThemeProvider\n","/* eslint-disable jsx-a11y/no-onchange */\nimport React from 'react'\nimport {\n  Grid,\n  Menu,\n  Segment,\n  Sidebar,\n  Icon,\n  Label,\n  Button,\n} from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport CountryTable from '../CountryTable'\nimport Flag from '../Flag'\nimport SearchBar from '../SearchBar'\nimport { SideBarProps, AppState } from '../../types'\nimport { removeCountry } from '../../redux/actions'\n// import ThemeSwitch from '../ThemeSwitch'\nimport { useTheme } from '../../contexts/ThemeContext'\nimport './SideBar.scss'\n\n// Inline style\nconst inCartStyle = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  flexDirection: 'row',\n}\n\nconst light = {\n  backgroundColor: '#E0DDCF',\n  color: 'black',\n}\nconst dark = {\n  backgroundColor: '#C5BAAF',\n  color: 'white',\n}\n\nconst SideBar = ({\n  inCart,\n  isFiltered,\n  filtered,\n  all,\n  handleClick,\n  handleAddCountry,\n  handleChange,\n}: SideBarProps) => {\n  const [visible, setVisible] = React.useState(false)\n  const dispatch = useDispatch()\n  const { theme, setTheme } = useTheme()!\n  const countriesInCart = useSelector((state: AppState) => state.country.inCart)\n  let count = countriesInCart.length\n\n  const isEmpty = (): boolean => {\n    if (count !== 0) {\n      if (visible === false) return false\n      else if (visible === true) return true\n    } else if (count === 0) {\n      return false\n    }\n    return false\n  }\n\n  const changeTheme = () => {\n    if (theme === 'light') return light\n    else return dark\n  }\n\n  return (\n    <Grid columns={1}>\n      <Grid.Column>\n        <div id=\"nav-container\" style={changeTheme()}>\n          <SearchBar handleChange={handleChange} />\n          {/* <select value={theme} onChange={}>\n            <option value=\"white\">White</option>\n            <option value=\"lightblue\">Blue</option>\n            <option value=\"lightgreen\">Green</option>\n          </select> */}\n          <Button.Group>\n            <Button\n              style={light}\n              onClick={(e) => setTheme(e.currentTarget.value)}\n              value=\"light\"\n            >\n              <Icon name=\"sun\" />\n            </Button>\n            <Button.Or />\n            <Button\n              style={dark}\n              onClick={(e) => setTheme(e.currentTarget.value)}\n              value=\"dark\"\n            >\n              <Icon name=\"moon\" />\n            </Button>\n          </Button.Group>\n          <Button onClick={() => setVisible(true)} as=\"div\">\n            <Button color=\"red\">\n              <Icon name=\"shopping cart\" />\n            </Button>\n            <Label as=\"a\" basic color=\"red\" pointing=\"left\">\n              {count}\n            </Label>\n          </Button>\n        </div>\n      </Grid.Column>\n\n      <Grid.Column>\n        <Sidebar.Pushable as={Segment}>\n          <Sidebar\n            as={Menu}\n            animation=\"overlay\"\n            direction=\"right\"\n            icon=\"labeled\"\n            inverted\n            onHide={() => setVisible(false)}\n            vertical\n            visible={isEmpty()}\n            width=\"thin\"\n            style={changeTheme()}\n          >\n            {inCart ? (\n              inCart.map((c: any) => (\n                <Menu.Item style={inCartStyle} key={c.key} as=\"div\">\n                  <Flag imageURL={c.flagURL} />\n                  {/* <p style={pStyle}>{c.name}</p> */}\n                  <Link to={`/countries/${c.name}`}>{c.name}</Link>\n                  <Button onClick={() => dispatch(removeCountry(c))}>\n                    Remove\n                  </Button>\n                </Menu.Item>\n              ))\n            ) : (\n              <p>Nothing in cart</p>\n            )}\n          </Sidebar>\n          <Sidebar.Pusher dimmed={isEmpty()}>\n            <Segment basic>\n              {isFiltered ? (\n                <div className=\"table-container\">\n                  <CountryTable\n                    theme={changeTheme()}\n                    data={filtered}\n                    handleClick={handleClick}\n                    handleAddCountry={handleAddCountry}\n                  />\n                </div>\n              ) : (\n                <div className=\"table-container\">\n                  <CountryTable\n                    theme={changeTheme()}\n                    data={all}\n                    handleClick={handleClick}\n                    handleAddCountry={handleAddCountry}\n                  />\n                </div>\n              )}\n            </Segment>\n          </Sidebar.Pusher>\n        </Sidebar.Pushable>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default SideBar\n","/* eslint-disable no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react'\nimport { useState, useCallback, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport SearchBar from '../SearchBar'\nimport CountryTable from '../CountryTable'\nimport useFetch from '../../hooks/useFetch'\nimport SideBar from '../SideBar'\nimport { RoutesProps, Country, AppState } from '../../types'\nimport './Main.scss'\nimport { addCountry } from '../../redux/actions'\nimport ThemeProvider, { useTheme } from '../../contexts/ThemeContext'\n\nconst Main = ({ countries }: RoutesProps) => {\n  const [keyword, setKeyword] = useState('')\n  const [filter, setFilter] = useState('Name')\n  const [isFiltered, setIsFiltered] = useState(false)\n  const [filtered, setFiltered] = useState([])\n  const [order, setOrder] = useState(false)\n  const dispatch = useDispatch()\n  const countriesInCart = useSelector((state: AppState) => state.country.inCart)\n  // const [allCountries, setAllCountries] = useState(countries);\n  // const res = useFetch(, {});\n  // if (!res.response) {\n  //     return <div>Loading...</div>\n  // }\n  // const countries = res.response;\n  // console.log(countries)\n\n  // function to handle sorting\n  const handleClick = useCallback(\n    (filter) => {\n      if (filter.toLowerCase() === 'flag') {\n        return null\n      } else {\n        if (!isFiltered) {\n          setIsFiltered(true)\n        }\n        switch (filter.toLowerCase()) {\n        case 'name':\n          setOrder(!order)\n          const sortByName: any = [...countries].sort((a: any, b: any) => {\n            return order\n              ? a.name.localeCompare(b.name)\n              : b.name.localeCompare(a.name)\n          })\n          setFiltered(sortByName)\n          break\n\n        case 'languages':\n          setOrder(!order)\n          const sortByLanguages: any = [...countries].sort(\n            (a: any, b: any) => {\n              return order\n                ? a.languages[0].name.localeCompare(b.languages[0].name)\n                : b.languages[0].name.localeCompare(a.languages[0].name)\n            }\n          )\n          setFiltered(sortByLanguages)\n          break\n\n        case 'population':\n          setOrder(!order)\n          const sortByPopulation: any = [...countries].sort(\n            (a: any, b: any) => {\n              return order\n                ? a.population - b.population\n                : b.population - a.population\n            }\n          )\n          setFiltered(sortByPopulation)\n          break\n\n        case 'region':\n          setOrder(!order)\n          const sortByRegion: any = [...countries].sort((a: any, b: any) => {\n            return order\n              ? a.region.localeCompare(b.region)\n              : b.region.localeCompare(a.region)\n          })\n          setFiltered(sortByRegion)\n          break\n        default:\n          setFiltered([])\n        }\n      }\n    },\n    [countries, isFiltered, order]\n  )\n\n  // function to handle searching\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault()\n    setKeyword(e.target.value)\n\n    let input: string,\n      filter: string,\n      tableBody: HTMLElement,\n      row: NodeListOf<HTMLElement>,\n      i: number,\n      countryName: string\n    input = e.target.value\n    filter = input.toUpperCase()\n    tableBody = document.getElementById('table-body') as HTMLElement\n    row = (tableBody.getElementsByClassName(\n      'table-row'\n    ) as unknown) as NodeListOf<HTMLElement>\n    for (i = 0; i < row.length; i++) {\n      countryName = (row[i].getElementsByClassName(\n        'country-name-text'\n      )[0] as HTMLElement).innerText\n      if (countryName.toUpperCase().indexOf(filter) > -1) {\n        row[i].style.display = ''\n      } else {\n        row[i].style.display = 'none'\n      }\n    }\n  }\n\n  //function to add country to shopping cart\n  const handleAddCountry = (chosenCountry: any) => {\n    const country: Country = {\n      key: chosenCountry.name,\n      name: chosenCountry.name,\n      flagURL: chosenCountry.flag,\n      languages: chosenCountry.languages,\n      population: chosenCountry.population,\n      region: chosenCountry.region,\n    }\n    console.log(country)\n    dispatch(addCountry(country))\n  }\n\n  return (\n    <div className=\"main\">\n      <ThemeProvider>\n        <SideBar\n          inCart={countriesInCart}\n          isFiltered={isFiltered}\n          filtered={filtered}\n          all={countries}\n          handleClick={handleClick}\n          handleAddCountry={handleAddCountry}\n          handleChange={handleChange}\n        />\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport Product from './pages/Product/Product'\nimport Main from './components/Main'\nimport { RoutesProps } from './types/index'\n\nconst Routes = ({ countries }: RoutesProps) => (\n  <Switch>\n    <Route\n      exact\n      path=\"/\"\n      render={(props) => <Main {...props} countries={countries} />}\n    />\n    <Route\n      exact\n      path=\"/countries/:name\"\n      render={(props) => <Product {...props} countries={countries} />}\n    />\n  </Switch>\n)\n\nexport default Routes\n","import { useState, useEffect } from 'react'\n\nconst useFetch = () => {\n  const [response, setResponse] = useState([])\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    let unmounted = false\n    const fetchData = async () => {\n      const url = 'https://restcountries.eu/rest/v2/all'\n      try {\n        if (!unmounted) {\n          const res = await fetch(url)\n          const json = await res.json()\n          setResponse(json)\n        }\n      } catch (error) {\n        if (!unmounted) {\n          setError(error)\n        }\n      }\n    }\n    fetchData()\n    return () => {\n      unmounted = true\n    }\n    // eslint-disable-next-line\n  }, [])\n  return [response, error]\n}\n\nexport default useFetch\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Routes from './Routes'\nimport useFetch from './hooks/useFetch'\n\nexport default function App() {\n  // eslint-disable-next-line\n  const [countries, error] = useFetch()\n\n  return (\n    <div className=\"App\">\n      <Routes countries={countries} />\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ProductState,\n  ProductActions,\n  ADD_PRODUCT,\n  REMOVE_PRODUCT,\n} from '../../types/index'\n\nexport default function product(\n  state: ProductState = {\n    inCart: [],\n  },\n  action: ProductActions\n): ProductState {\n  switch (action.type) {\n  case ADD_PRODUCT: {\n    const { product } = action.payload\n    if (state.inCart.find((p) => p.id === product.id)) {\n      return state\n    }\n    // Always return new state (e.g, new object) if changed\n    return { ...state, inCart: [...state.inCart, product] }\n  }\n\n  case REMOVE_PRODUCT: {\n    const { product } = action.payload\n    const index = state.inCart.findIndex((p) => p.id === product.id)\n    if (index >= 0) {\n      state.inCart.splice(index, 1)\n      return { ...state, inCart: [...state.inCart] }\n    }\n    return state\n  }\n\n  default:\n    return state\n  }\n}\n","import { TOGGLE_DIALOG, UiState, UiActions } from '../../types/index'\n\nconst defaultState: UiState = {\n  dialogOpen: {},\n}\n\nexport default function ui(\n  state: UiState = defaultState,\n  action: UiActions\n): UiState {\n  switch (action.type) {\n  case TOGGLE_DIALOG: {\n    return {\n      ...state,\n      dialogOpen: {\n        ...state.dialogOpen,\n        [action.payload.dialog]: !state.dialogOpen[action.payload.dialog],\n      },\n    }\n  }\n\n  default:\n    return state\n  }\n}\n","import {\n  CountryState,\n  CountryActions,\n  ADD_COUNTRY,\n  REMOVE_COUNTRY,\n} from '../../types/index'\n\nexport default function country(\n  state: CountryState = {\n    inCart: [],\n  },\n  action: CountryActions\n): CountryState {\n  switch (action.type) {\n  case ADD_COUNTRY: {\n    const { country } = action.payload\n    if (state.inCart.find((c) => c.name === country.name)) {\n      return state\n    }\n    // Always return new state (e.g, new object) if changed\n    return { ...state, inCart: [...state.inCart, country] }\n  }\n\n  case REMOVE_COUNTRY: {\n    const { country } = action.payload\n    const index = state.inCart.findIndex((c) => c.name === country.name)\n    if (index >= 0) {\n      state.inCart.splice(index, 1)\n      return { ...state, inCart: [...state.inCart] }\n    }\n    return state\n  }\n\n  default:\n    return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport product from './product'\nimport ui from './ui'\nimport country from './country'\n\nconst createRootReducer = () =>\n  combineReducers({\n    product,\n    country,\n    ui,\n  })\n\nexport default createRootReducer\n","import { takeLatest } from 'redux-saga/effects'\n\nimport { ADD_PRODUCT, AddProductAction } from '../../types/index'\n\nfunction* doSomethingWhenAddingProduct(action: AddProductAction) {\n  yield console.log(action)\n}\n\nexport default [takeLatest(ADD_PRODUCT, doSomethingWhenAddingProduct)]\n","import { takeLatest } from 'redux-saga/effects'\n\nimport { TOGGLE_DIALOG, ToggleDialogAction } from '../../types/index'\n\nfunction* doSomethingWhenDialogOpen(action: ToggleDialogAction) {\n  yield console.log(action)\n}\n\nexport default [takeLatest(TOGGLE_DIALOG, doSomethingWhenDialogOpen)]\n","import { all } from 'redux-saga/effects'\n\nimport productSagas from './product'\nimport uiSagas from './ui'\n\nexport default function* rootSaga() {\n  yield all([\n    ...productSagas,\n    ...uiSagas,\n  ])\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveState = (state: any) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch {\n    // ignore write errors\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport thunk from 'redux-thunk'\nimport throttle from 'lodash.throttle'\n\nimport { AppState } from '../types/index'\nimport createRootReducer from './reducers'\nimport rootSaga from './sagas'\nimport { loadState, saveState } from '../localStorage'\n\n//load localStorage item\nconst persistedState = loadState() ? loadState().country.inCart : []\nconsole.log(persistedState)\n\nconst initState: AppState = {\n  product: {\n    inCart: [],\n  },\n  country: {\n    inCart: persistedState,\n  },\n  ui: {\n    dialogOpen: {},\n  },\n}\n\nexport default function makeStore(initialState = initState) {\n  const sagaMiddleware = createSagaMiddleware()\n  const middlewares = [sagaMiddleware, thunk]\n  let composeEnhancers = compose\n\n  if (process.env.NODE_ENV === 'development') {\n    if ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    }\n  }\n\n  const store = createStore(\n    createRootReducer(),\n    initialState,\n    composeEnhancers(applyMiddleware(...middlewares))\n  )\n\n  // save state to localStorage\n  store.subscribe(\n    throttle(() => {\n      saveState({\n        country: {\n          inCart: store.getState().country.inCart,\n        },\n      })\n    }, 1000)\n  )\n\n  sagaMiddleware.run(rootSaga)\n\n  if ((module as any).hot) {\n    ;(module as any).hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers').default\n      store.replaceReducer(nextReducer)\n    })\n  }\n\n  return store\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport makeStore from './redux/store'\nimport './index.scss'\n\nconst store = makeStore()\n\nconst WithProvider = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n)\n\nReactDOM.render(<WithProvider />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}